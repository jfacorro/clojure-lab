(ns macho.document
  (:refer-clojure :exclude [replace]))

(defrecord Document [name])

(defn open [doc]
  (let [text (if (:path doc)
               (StringBuffer. ^String (slurp (:path doc)))
               (StringBuffer.))]
    (assoc doc :text text)))

(defn append [doc s]
  (.append (:text doc) s)
  doc)

(defn insert [doc offset s]
  (.insert (:text doc) offset s)
  doc)

(defn length [doc]
  (.length (:text doc))
  doc)

(defmacro ! [f at & args]
  `(swap! ~at ~f ~@args))

(defn make-document
  "Creates a new document using the name, path 
  and alternate models provided."
  [path & alts]
  (let [doc (Document. (or path :new-document-title))]
    (assoc doc :path path :alternates alts)))

(defn attach-view
  "Attaches a view to the document. x should be 
  an agent/atom/var/ref reference. (Maybe it should
  be declared in macho.view)"
  [x view]
  (view :init x)
  (add-watch x :update view))

;;---------------------------------
;; Wishful coding.
;;---------------------------------
(comment
  ;; Usage from control
  (let [doc     (make-document "bla")
        view    (default-document-view)
        control (default-document-control)]
    (attach-view doc view)
    (attach-control doc view control)
    (add-document doc)
    (add-view main-view view))
  
  ;; Handle state change from the view
  (fn [op & args] ;; Dispatch function generated by defview in macho.view
    (case op
      :init (apply init args)
      :update (apply update args)
      ,,,))
  
  ;;-----------------------------------------
  ;; Some preliminary tests.
  ;;-----------------------------------------
  (def doc (atom (with-meta (doc/Document. nil) {:doc true}) :meta {:atom true}))
  (println (meta doc) (meta @doc))
  
  (! open doc)
  (! append doc "bla")
  (! append doc " ")
  (! append doc "ble")
  
  (defn alternate [entity f]
    (if (instance? clojure.lang.Atom entity)
      nil))
    
  (alternate doc nil)
)