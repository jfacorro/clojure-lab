(ns macho.document
  (:refer-clojure :exclude [replace name])
  (:require [macho.buffer :as b]
            [macho.misc :as util]
            [clojure.java.io :as io]))

(defrecord Document [name path modified text alternates])

(defn- default-buffer
  "Returns a buffer implementation."
  [& xs]
  (apply b/incremental-buffer xs))
;-------IO operations--------
(defn bind
  "Binds a document to a file."
  [doc path]
  (let [text   (slurp path)
        name   (-> path io/file .getName)
        props  {:text (default-buffer text)
                :path path
                :name name}]
    (merge doc props)))
;-------Properties--------
(defn name
  "Returns the document's name."
  [doc]
  (:name doc))

(defn length
  "Returns the document content's length."
  [doc]
  (b/length (:text doc)))

(defn text
  "Returns the document's content."
  [doc]
  (b/text (:text doc)))

(defn path
  "Returns the path for the binded file if any."
  [doc]
  (:pah doc))

(defn file
  "If the document is bound to a file, then an instance
  of this file is returned, otherwise returns nil."
  [doc]
  (io/file (path doc)))

(defn modified?
  "Returns true if the document was modified since 
  it was created, opened or the last time it was saved."
  [doc]
  (:modified doc))

(defn search
  "Find the matches for the expression in the document
  and returns the delimiters (index start and end) for each
  match."
  [doc s]
  (util/find-limits s (text doc)))
;-------Text operations--------
(defn insert
  "Inserts s at the document's offset position.
  Returns the document."
  [doc offset s]
  (into doc {:text (b/insert (:text doc) offset s)
             :modified true}))

(defn append
  "Appends s to the document's content.
  Returns the document."
  [doc s]
  (insert doc (length doc) s))

(defn delete
  "Delete the document's content from start to end position.
  Returns the document."
  [doc start end]
  (into doc {:text (b/delete (:text doc) start end)
             :modified true}))

(defn replace
  "Replaces all ocurrences of src with rpl."
  [doc src rpl]
  (let [limits (search doc src)
        f      (fn [x [s e]]
                 (-> x (delete s e) (insert s rpl)))]
    (reduce f doc limits)))
;----Document creation function----
(defn document
  "Creates a new document using the name and alternate models provided."
  [name & {:keys [path alternates] :or {path nil alternates []}}]
  {:pre [(not (nil? name))]}
  (let [doc (Document. name nil false (default-buffer) alternates)]
    (if path
      (bind doc path)
      doc)))
;----Alternates----
(defn add-alternate
  "Adds an alternate model to the map."
  [m k alt]
  {:pre [(map? m)
         (-> m :alternates k nil?)]}
  (let [alts (-> m :alternates (assoc k alt))]
    (assoc m :alternates alts)))

(defn alternate
  [doc alt-name]
  (-> doc :alternates alt-name))

(defn all-alternates
  [doc alt-name]
  (-> doc :alternates))

(defmacro !
  "Applies f to the atom x using the supplied arguments.
  Convenience macro."
  [f x & args]
  `(swap! ~x ~f ~@args))

(defn attach-view
  "Attaches a view to the document. x should be 
  an agent/atom/var/ref reference.
  (Maybe it should be declared in macho.view)"
  [x view]
  (view :init x)
  (add-watch x :update view))
;;---------------------------------
;; Wishful coding.
;;---------------------------------
(comment
  ;; Usage from control
  (let [doc     (make-document "bla")
        view    (default-document-view)
        control (default-document-control)]
    (attach-view doc view)
    (attach-control doc view control)
    (add-document doc)
    (add-view main-view view))
  
  ;; Handle state change from the view
  (fn [op & args] ;; Dispatch function generated by defview in macho.view
    (case op
      :init (apply init args)
      :update (apply update args)
      ,,,))
)